# Base for all actors.
^CoreVisibleActor:
	# All our actors are sprite based and need to render sprites.
	RenderSprites:
        FactionImages:
	# At default fog hides every actor.
	HiddenUnderFog:
	# Allow actors to rotate and use facings.
	BodyOrientation: # TODO verify if we can remove this from constructions!
	# Automatically detect the number of facings from the sequences.
	QuantizeFacingsFromSequence: # TODO see BodyOrientation todo
	# Required to see debug overlays.
	CombatDebugOverlay:

# Map decoration actors.
^CoreDecoration:
	Inherits: ^CoreVisibleActor
	# Always visible, no special shroud logic here.
	-HiddenUnderFog:
	FrozenUnderFog:
	# Decorations have sprites but do not use facing for them.
	WithSpriteBody:
	# Default setting makes decorations take 1x1 tiles.
	Building:
		Dimensions: 1,1
		Footprint: x
	# Put decorations in own catgegory in map editor.
	MapEditorData:
		Categories: Decorations
	# Enforce neutral ownership.
	RequiresSpecificOwners:
		ValidOwnerNames: Neutral

# Base for all movable units.
^CoreUnit:
	Inherits: ^CoreVisibleActor
	# Default set which fits for most units: Occupy exactly 1 cell / 32x32 pixel tile.
	HitShape:
		Type: Circle
			Radius: 512
	# In general all units can be selected by using its full cell / tile.
	Selectable:
		Bounds: 1024, 1024
		# Make the default priority higher, so units are prefered over constructions.
		Priority: 20
	# Units have a healthbar when selected or hovered.
	SelectionDecorations:
	# Enemy units must be destroyed to win a game.
	MustBeDestroyed:
	# Units sequences should always use facings.
	WithFacingSpriteBody:
	# Units are visible on the radar.
	AppearsOnRadar:
	# Allow units to use the AttackMove and AssaultMove commands.
	AttackMove:
	# Use their center position instead of their footprint for fog hiding logic.
	HiddenUnderFog:
		Type: CenterPosition
	# Units should die when owner lost the game.
	OwnerLostAction:
		Action: Kill
	# Show control group numbers when selected.
	WithTextControlGroupDecoration:
		Position: BottomRight
	# Units have slightly lighter color on radar than buildings
	ActorRadarColor:
		DeltaS: -0.2
		DeltaV: -0.1
	# Play sound notification on destruction
	ActorLostNotification:
		TextNotification: Unit lost.
	# Unit is added to the observer stats.
	UpdatesPlayerStatistics:

# Base for all buildings and towers.
^CoreConstruction:
	Inherits: ^CoreVisibleActor
	# Last seen state of a building will be rendered under fog, instead of using the default hiding behavior.
	-HiddenUnderFog:
	FrozenUnderFog:
	# Applying "building"-damage to all actors based on this.
	Armor:
		Type: building
	# Add building specific logic to Constructions.
	Building:
		TerrainTypes: Clear, Road
	# Constructions can be targeted by anything which attacks ground.
	Targetable:
		TargetTypes: Ground, Structure
	# In general all constructions can be selected.
	Selectable:
	# Constructions have sprites but do not use facing for them.
	WithSpriteBody:
	# Constructions require power (and can be manually powered down).
	Power:
		RequiresCondition: !Transforming && !PoweredDown
	# Constructions can be powered down by specific order.
	ToggleConditionOnOrder:
		DisabledSpeech: PowerOn
		EnabledSpeech: PowerOff
		Condition: PoweredDown
		OrderName: PowerDown
	# Constructions are visible on the radar.
	AppearsOnRadar:
	# Constructions should explode when owner lost the game.
	OwnerLostAction:
		Action: Kill
	# No projectiles can pass through a construction.
	BlocksProjectiles:
	# Buildings have healthbars.
	SelectionDecorations:
	# Play sound notification on destruction
	ActorLostNotification:
		Notification: BuildingLost
		TextNotification: Structure lost.

# Base for all buildings.
^CoreBuilding:
	Inherits: ^CoreConstruction
	# Enemy buildings have to be destroyed to win, even when short game option is used.
	MustBeDestroyed:
		RequiredForShortGame: true
	# Buildings can be repaired.
	RepairableBuilding:
		RequiresCondition: Powered
		RepairInterval: 1
		RepairPercent: 40
		RepairStep: 10
		RepairingNotification: Repairing
		RepairingStoppedNotification: RepairsInterrupted
	# The view radius of buildings.
	RevealsShroud:
		Range: 4c896
	# Group all buildings in the map editor.
	MapEditorData:
		Categories: Building
	# Should not be auto attacked.
	Targetable@NoAutoAttack:
		TargetTypes: NoAutoAttack
	# Construction animation.
	TransformSequence:
		Image: core_buildingsequence_large
		Condition: Transforming
		ConstructionTime: 30
		TransformSound: 78.smp
	# Render building sprite when transformation is done.
	WithSpriteBody:
		RequiresCondition: !Transforming
	# This actor explodes when killed.
	Explodes:
		Weapon: BuildingExplosion
		EmptyWeapon: BuildingExplosion
	# Display decorative repair marker when a building is being repaired.
	WithBuildingRepairDecoration:
		Image: repair
		Sequence: idle
		Palette:
		Position: Center

# Base for all factories.
^CoreFactory:
	Inherits: ^CoreBuilding
	Production:
		RequiresCondition: !Transforming
		PauseOnCondition: !Powered
	ProductionQueue:
		QueuedAudio: ProductionStarted
		ReadyAudio: ProductionComplete
		CancelledAudio: ProductionCancelled
		OnHoldAudio: ProductionInterrupted
		InfiniteBuildLimit: 10
	# Allow player setting rally point.
	CustomRallyPoint:
		Cursor: move
		LineWidth: 2

# Base for all factories using animated exit production.
^CoreDoorFactory:
	Inherits: ^CoreFactory
	# Door production needs custom production.
	-Production:
	AnimatedExitProduction:
		RequiresCondition: !Transforming
		PauseOnCondition: !Powered
	-ProductionQueue:
	AnimatedExitProductionQueue:
		QueuedAudio: ProductionStarted
		ReadyAudio: ProductionComplete
		CancelledAudio: ProductionCancelled
		OnHoldAudio: ProductionInterrupted
		InfiniteBuildLimit: 10

# Base for all factories using elevator production.
^CoreElevatorFactory:
	Inherits: ^CoreFactory
	# Use custom RenderSprites trait for rendering elevator.
	-RenderSprites:
	RenderElevatorSprites:
	# Elevator production needs custom production.
	-Production:
	ElevatorProduction:
		ZOffset: -1024
		RequiresCondition: !Transforming
		PauseOnCondition: !Powered
	-ProductionQueue:
	AnimatedExitProductionQueue:
		QueuedAudio: ProductionStarted
		ReadyAudio: ProductionComplete
		CancelledAudio: ProductionCancelled
		OnHoldAudio: ProductionInterrupted
		InfiniteBuildLimit: 10

# Base for all towers.
^CoreTower:
	Inherits@1: ^CoreConstruction
	Inherits@2: ^CoreTurret
	# Group all towers in the map editor.
	MapEditorData:
		Categories: Tower
	# Towers are always 2x2 in size.
	Building:
		Dimensions: 2,2
		Footprint: xx==
	# Correct Hitshape and selection box for all towers
	HitShape:
		Type: Rectangle
			TopLeft: -1024, -1024
			BottomRight: 1024, 0
		TargetableOffsets: 819,-512,0, 819,512,0
	Selectable:
		Bounds: 2048, 2048, 0, -512
	# Towers also have to be destroyed when short game option is used.
	MustBeDestroyed:
		RequiredForShortGame: true
	# Default looking south
	Turreted:
		InitialFacing: 512
		RealignDelay: -1
	# Construction animation.
	TransformSequence:
		Image: core_buildingsequence_small
		Condition: Transforming
		TransformSound: 78.smp
	WithSpriteBody:
		RequiresCondition: !Transforming

# Base for all infantry.
^CoreInfantry:
	Inherits@1: ^CoreUnit
	Inherits@2: ^Cloakable
	# Applying "infantry"-damage to all actors based on this.
	Armor:
		Type: infantry
	# Vehicles can kill infantry by driving over them.
	Crushable:
		WarnProbability: 0
	# Allow 5 infantry units to share a cell and set movement modifiers.
	Mobile:
		Speed: 50
		Locomotor: infantry
	# Actor can be targeted by anything which attacks ground.
	Targetable:
		TargetTypes: Ground, Infantry
	# Calculated size for infantry to match shared cells.
	Selectable:
		Bounds: 256,288,0,0
	# Infantry hitshape
	HitShape:
		Type: Circle
			Radius: 128
	# Infantry has an animation while moving.
	WithMoveAnimation:
	# Grants condition when moving.
	GrantConditionOnMovement:
		Condition: moving
	# Periodically plays an idle animation
	WithIdleAnimation:
		Sequences: idle2
		Interval: 100,200
		RequiresCondition: !moving
	# Group all infantry in the map editor.
	MapEditorData:
		Categories: Infantry
	# Can guard and be guarded
	Guard:
		Voice: Escort
	Guardable:
	#Infantry has own death animations.
	WithDeathAnimation:
		DeathTypes:
			Default: -default
			Explosion: -explode
			Fire: -burn
		CrushedSequence: die-crushed
		CrushedSequencePalette:
		FallbackSequence: die
	# Infantry turns when idle.
	TurnOnIdle:
		MinDelay: 200
		MaxDelay: 600
	# Infantry units have shadow.
	WithIdleOverlay:
		Sequence: shadow
		Palette:
	# Infantry can enter Cargo actors.
	Passenger:
		CargoType: Infantry

# Add locomotor to world...
^CoreWorld:
	Locomotor@infantry:
		Name: infantry
		SharesCell: true
		TerrainSpeeds:
			Clear: 100
			Sand: 100
			SandEdge: 100
			Road: 100
			AsphaltRoad: 100

# Base for all vehicles
^CoreVehicle:
	Inherits@1: ^CoreUnit
	Inherits@2: ^Cloakable
	Armor:
		Type: vehicle
	# Vehicles can kill infantry by moving over them and set movement modifiers.
	Mobile:
		TurnSpeed: 50
		Locomotor: vehicle
		BlockedCursor: generic-blocked
	# Actor can be targeted by anything which attacks ground.
	Targetable@Default:
		TargetTypes: Ground, Vehicle
	# Actor can be autorepaired by friendly HCU-M.
	Targetable@Repair:
		RequiresCondition: damaged
		TargetTypes: DamagedUnit
	# Condition to be granted to damaged vehicles so HCU-M can autorepair them.
	GrantConditionOnDamageState@Damaged:
		Condition: damaged
		ValidDamageStates: Light, Medium, Heavy, Critical
	# Vehicles have an animation while moving.
	WithMoveAnimation:
	# Group all vehicles in the map editor.
	MapEditorData:
		Categories: Vehicle
	# Can guard and be guarded
	Guard:
		Voice: Escort
	Guardable:
	# This actor explodes when killed.
	Explodes:
		Weapon: VehicleExplosion
		EmptyWeapon: VehicleExplosion
	# Vehicles smoke when they're heavily damaged.
	WithDamageOverlay:
		Image: smoking

# Add locomotor to world...
^CoreWorld:
	Locomotor@vehicle:
		Name: vehicle
		Crushes: infantry
		CrushDamageTypes: Crush
		TerrainSpeeds:
			Clear: 100
			Sand: 50
			SandEdge: 50
			Road: 100
			AsphaltRoad: 100
	Locomotor@vehicleFastSand:
		Name: vehicleFastSand
		Crushes: infantry
		CrushDamageTypes: Crush
		TerrainSpeeds:
			Clear: 100
			Sand: 100
			SandEdge: 100
			Road: 100
			AsphaltRoad: 100

# Base for all aircrafts
^CoreAircraft:
	Inherits@1: ^CoreUnit
	Inherits@2: ^Cloakable
	# Applying "armor"-damage to all actors based on this.
	Armor:
		Type: aircraft
	# Making the actors actualy fly.
	Aircraft:
		TurnSpeed: 50
		IdleBehavior: Land
		LandableTerrainTypes: Clear, Shore, Sand, Road
		CruiseAltitude: 1c256
		AltitudeVelocity: 0c60
		IdealSeparation: 1c0
		RepulsionSpeed: 50
		AirborneCondition: airborne
		VTOL: True
		Crushes: infantry
	# Actor can be targeted by anything which attacks ground.
	Targetable@Ground:
		RequiresCondition: !airborne
		TargetTypes: Ground, Vehicle
		# Actor can be targeted by anything which attacks air.
	Targetable@Airborne:
		RequiresCondition: airborne
		TargetTypes: Air
	# Group all aircrafts in the map editor.
	MapEditorData:
		Categories: Vehicle
	# Aircraft has visible shadow on ground beneath
	WithShadow:
		Offset: 0,32,0
		ZOffset: -256
		ShadowColor: 00000046
	# Reveal shroud based on aircraft's ground position.
	RevealsShroud:
		Type: GroundPosition
	# Can guard and be guarded
	Guard:
		Voice: Escort
	Guardable:
	# This actor explodes when killed.
	Explodes:
		Weapon: VehicleExplosion
		EmptyWeapon: VehicleExplosion
		RequiresCondition: !airborne
	# Aircraft can be cloaked, but only if it is on the ground.
	Cloak:
		RequiresCondition: shadowcloak && !airborne

# Base for all aircrafts husks
^CoreAircraftHusk:
	Inherits: ^CoreAircraft
	# Husks shouldn't be selectable in the map editor.
	-MapEditorData:
	# Husks shouldn't be selectable, only interctable.
	-Selectable:
	Interactable:
	# Default health for aircraft husks.
	Health:
		HP: 1000
	# Aircraft husks fall to the ground and explode.
	FallsToEarth:
		Explosion: VehicleExplosion
	# Aircraft husks are no longer targetable.
	Targetable@Airborne:
		TargetTypes: NoTarget
	# Do not notify the player that a husk was lost.
	-ActorLostNotification:
	# Husks are not counted towards player's army.
	-UpdatesPlayerStatistics:

# Special light vehicles
^CoreLightVehicle:
	# Can not crush infantry.
	Mobile:
		Locomotor: vehicleNonCrushing

# Add locomotor to world...
^CoreWorld:
	Locomotor@vehicleNonCrushing:
		Name: vehicleNonCrushing
		TerrainSpeeds:
			Clear: 100

# Base for all ships
^CoreShip:
	Inherits: ^CoreVehicle
	# Ships movement modifiers.
	Mobile:
		Locomotor: ship
	# Actor can be targeted by anything which attacks vehicles or ships.
	Targetable@Default:
		TargetTypes: Ship, Vehicle
	# Group all ships in the map editor.
	MapEditorData:
		Categories: Ship

# Add locomotor to world...
^CoreWorld:
	Locomotor@ship:
		Name: ship
		TerrainSpeeds:
			Water: 100

# Grouped traits for standard turret behavior.
^CoreTurret:
	# General turret behavior.
	Turreted:
		TurnSpeed: 30
	# Special trait to position turret depending on attachment point (only visualy).
	WithSpriteTurret:
	# If it has a turret, it should attack with its turret only, meaning it can aim and fire with it while moving.
	AttackTurreted:
		Voice: Attack
	# Auto target enemies nearby.
	AutoTarget:
	AutoTargetPriority:
		InvalidTargets: Structure

# Grouped traits for standard non-turreted behavior.
^CoreArmedSelf:
	# Units without a turret have to stop and aim at a target to shoot.
	AttackFrontal:
		FacingTolerance: 0
		Voice: Attack
	# Auto target enemies nearby.
	AutoTarget:
	AutoTargetPriority:
		InvalidTargets: Structure

# Grouped traits for standard infantry attack behavior.
^CoreArmedSelfInfantry:
	# Units without a turret have to stop and aim at a target to shoot.
	AttackFrontal:
		FacingTolerance: 15
		Voice: Attack
	# Auto target enemies nearby.
	AutoTarget:
	AutoTargetPriority:
		InvalidTargets: Structure
	# Grants condition when shooting.
	GrantConditionOnAttack:
		Condition: shooting
		RevokeDelay: 100
	# Make sure idle animation is not played when shooting.
	WithIdleAnimation:
		RequiresCondition: !shooting && !moving
	# Make sure turning is not triggered when shooting.
	TurnOnIdle:
		RequiresCondition: !shooting
	# Specify sequences to use when shooting and aiming.
	WithAimAttackAnimation:
		SequenceFire: shoot
		SequenceAim: aim

# Grouped traits for standard non-turreted behavior.
^CoreAttackAircraft:
	# Allows aircrafts attacking strafe run way.
	AttackAircraft:
		FacingTolerance: 0
		Voice: Attack
		PersistentTargeting: false
		OpportunityFire: false
	# Auto target enemies nearby.
	AutoTarget:
	AutoTargetPriority:
		InvalidTargets: Structure

# Units can be cloaked by SHADOW unit.
^Cloakable:
	# Inherits: ^SilhouetteShadowCloak
	Inherits: ^SemiTransparentShadowCloak
	Cloak:
		RequiresCondition: shadowcloak
		InitialDelay: 0
		CloakDelay: 90
		Palette:
		UncloakOn: None
		EffectPalette:
	# This allows using condition 'shadowcloak' which SHADOW unit provides.
	ExternalCondition:
		Condition: shadowcloak

# Cloak effect: cloaked actors are rendered as semi-transparent.
^SemiTransparentShadowCloak:
	WithCloakShadow:
		ShadowColor: 00000046
		TransparentAppearance: true
		# Muzzle overlay should be always rendered without any modification.
		TraitsToFullyRender: WithMuzzleOverlay
		# Make custom shadow sprites slightly more transparent.
		OverrideShadowAlphaForSequences:
			shadow: 0.75
		# Make turret shadow slightly more transparent.
		ApplyToRenderModifierTraits:
			WithTurretShadow: 0.14

# Cloak effect: cloaked actors are rendered as a shadow silhouette.
^SilhouetteShadowCloak:
	WithCloakShadow:
		# ShadowColor: 00000046
		ShadowColor: 00000046
		TransparentAppearance: false
		# Muzzle overlay should be always rendered without any modification.
		TraitsToFullyRender: WithMuzzleOverlay
		# Hide custom shadow sprites.
		OverrideShadowAlphaForSequences:
			shadow: 0
		# Hide turret shadow.
		ApplyToRenderModifierTraits:
			WithTurretShadow: 0
